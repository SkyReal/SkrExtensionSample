parameters:
    - { name: deployInstaller, type: boolean }

jobs:
    - job: BuildUEExtension
      timeoutInMinutes: 360
      displayName: Build UE Extension
      pool:
          name: "Default"
          demands:
              - UEAgent -equals true
              - UE5_3_INSTALL_DIR
              - NSIS
        
      variables:
          versionPatch: $[counter(variables['build.sourceBranchName'], 0)]
          
      steps:
          # Initialize build
          - template: ../steps/restore-repo.yml
            parameters:
              cleanCheckout: true
              setupRepository: true
          
          # Update build counter
          - pwsh: |
              $VariablesFileName = Variables.json
              
              $Document = Get-Content -Path $VariablesFileName | ConvertFrom-Json
              $Document.VersionBuildCounter = $(versionPatch)
              $Document | ConvertTo-Json | Set-Content -Path $VariablesFileName
              
            displayName: "Update build counter"
          
          # Build repository
          - pwsh: |
              $Variables = ./ressources/SkrExtensionScripts/scripts/Get-Variables.ps1
              $OutputInstallDir = $Variables.OutputInstallDir
              $InstallerName = $Variables.InstallerName
              Write-Host "##vso[task.setvariable variable=outputInstallDir;]${OutputInstallDir}"
              Write-Host "##vso[task.setvariable variable=installerName;]${InstallerName}"
              ./ressources/SkrExtensionScripts/scripts/Build-Repository.ps1
            displayName: "Build repository"
          
          - task: ArchiveFiles@2
            displayName: "Archive extension"
            inputs:
                rootFolderOrFile: "$(outputInstallDir)"
                includeRootFolder: false
                sevenZipCompression: normal
                archiveFile: "$(build.artifactStagingDirectory)/binaries/$(installerName).zip"

          # Push artifacts
          - task: PublishPipelineArtifact@1
            displayName: "Push extension Binaries"
            inputs:
                targetPath: "$(build.artifactStagingDirectory)/binaries/$(installerName).zip"
                artifact: '$(installerName)'
                
                
          # Publish output
          - ${{ if eq(parameters.deployInstaller, true) }}:
                - template: ../steps/deploy-installer.yml
                
          # Clean repo
          - template: ../steps/restore-repo.yml
            parameters:
              cleanCheckout: true
              setupRepository: false